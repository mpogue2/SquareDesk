#!/bin/bash

# SquareDesk Notarization Script
# This script handles the notarization process for SquareDesk.
#
# NOTE: The app-specific-password is generated by Mike Pogue, and it is secret.
#  If you are not Mike, you'll need to use YOUR secret app-specific-password here.
#
# Show usage information
if [ $# -lt 5 ]; then
    echo "Usage: $0 <app_path> <apple_id> <password> <team_id> [check_interval_seconds]"
    echo "Example: $0 ./SquareDesk_1.0.30.app your@email.com app-specific-password K63QFQ4P65 300"
    exit 1
fi

# Get command line arguments
APP_PATH="$1"
APPLE_ID="$2"
APP_PASSWORD="$3"
TEAM_ID="$4"
CHECK_INTERVAL="${5:-300}"  # Default to 300 seconds (5 minutes) if not specified

# Validate app exists
if [ ! -d "$APP_PATH" ] || [[ "$APP_PATH" != *.app ]]; then
    echo "Error: '$APP_PATH' is not a valid .app bundle"
    exit 1
fi

echo "====== SquareDesk Notarization Script ======"
echo "Starting at $(date)"
echo ""

# Step 1: Create ZIP archive
APP_NAME=$(basename "$APP_PATH")
ZIP_NAME="${APP_NAME%.app}.zip"

echo "Creating ZIP archive: $ZIP_NAME"
if [ -f "$ZIP_NAME" ]; then
    rm "$ZIP_NAME"
    echo "Removed existing ZIP file"
fi

ditto -c -k --keepParent "$APP_PATH" "$ZIP_NAME"
if [ $? -ne 0 ]; then
    echo "Error: Failed to create ZIP archive"
    exit 1
fi
echo "Successfully created ZIP archive: $ZIP_NAME"
echo ""

# Step 2: Submit for notarization
echo "Submitting for notarization..."
echo "Apple ID: $APPLE_ID"
echo "Team ID: $TEAM_ID"
echo ""

# Submit to Apple's notarization service
SUBMIT_OUTPUT=$(xcrun notarytool submit "$ZIP_NAME" --apple-id "$APPLE_ID" --password "$APP_PASSWORD" --team-id "$TEAM_ID" 2>&1)
SUBMIT_STATUS=$?

if [ $SUBMIT_STATUS -ne 0 ]; then
    echo "Error: Notarization submission failed with status $SUBMIT_STATUS"
    echo "Output: $SUBMIT_OUTPUT"
    exit 1
fi

# Save the output to a file for debugging
echo "$SUBMIT_OUTPUT" > submit_output.txt

# Extract the submission ID with a regexp for UUIDs
REQUEST_ID=$(grep -o -E "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" submit_output.txt | head -1)

if [ -z "$REQUEST_ID" ]; then
    echo "Error: Could not extract submission ID from output. Please check submit_output.txt"
    cat submit_output.txt
    exit 1
fi

echo "Submission successful. Request ID: $REQUEST_ID"
echo ""

# Step 3: Wait for notarization to complete
echo "Waiting for notarization to complete..."
echo "Checking status every $(($CHECK_INTERVAL / 60)) minutes"
echo ""

while true; do
    echo "Checking status at $(date)..."
    
    # Save the status output to a file for debugging
    STATUS_OUTPUT=$(xcrun notarytool info "$REQUEST_ID" --apple-id "$APPLE_ID" --password "$APP_PASSWORD" --team-id "$TEAM_ID" 2>&1)
    echo "$STATUS_OUTPUT" > status_output.txt
    
    if [ $? -ne 0 ]; then
        echo "Error checking status. Will retry in $(($CHECK_INTERVAL / 60)) minutes..."
        cat status_output.txt
        sleep $CHECK_INTERVAL
        continue
    fi
    
    # Extract status using grep - match exactly the line format from the observed output
    STATUS=$(grep -E "^  status: " status_output.txt | sed 's/^  status: //g')
    
    if [ -z "$STATUS" ]; then
        echo "Warning: Could not parse status from output. Will retry in $(($CHECK_INTERVAL / 60)) minutes..."
        cat status_output.txt
        sleep $CHECK_INTERVAL
        continue
    fi
    
    echo "Current status: $STATUS"
    
    if [ "$STATUS" == "Accepted" ]; then
        echo "✅ Notarization successful!"
        break
    elif [ "$STATUS" == "Invalid" ] || [ "$STATUS" == "Rejected" ]; then
        echo "❌ Notarization rejected"
        
        # Get and save the logs
        LOG_FILE="notarization_log_${REQUEST_ID}.json"
        echo "Saving detailed logs to $LOG_FILE"
        xcrun notarytool log "$REQUEST_ID" --apple-id "$APPLE_ID" --password "$APP_PASSWORD" --team-id "$TEAM_ID" > "$LOG_FILE" 2>&1
        
        echo "Please check $LOG_FILE for details on why notarization failed"
        exit 1
    elif [ "$STATUS" == "In Progress" ]; then
        echo "Notarization still in progress. Waiting $(($CHECK_INTERVAL / 60)) minutes..."
        sleep $CHECK_INTERVAL
    else
        echo "Unknown status: $STATUS"
        echo "Will retry in $(($CHECK_INTERVAL / 60)) minutes..."
        sleep $CHECK_INTERVAL
    fi
done

# Step 4: Staple the notarization ticket
echo ""
echo "Stapling notarization ticket to $APP_PATH..."
xcrun stapler staple "$APP_PATH"

if [ $? -ne 0 ]; then
    echo "⚠️ Warning: Failed to staple notarization ticket"
    echo "The app is notarized but users may still see security warnings"
else
    echo "✅ Successfully stapled notarization ticket"
    
    # Verify the stapling
    echo "Verifying stapling..."
    xcrun stapler validate "$APP_PATH"
    
    if [ $? -ne 0 ]; then
        echo "⚠️ Warning: Stapling verification failed"
    else
        echo "✅ Stapling verification successful"
    fi
fi

echo ""
echo "✅ SUCCESS: SquareDesk has been successfully notarized!"
echo "The app is now ready for distribution."
echo ""
echo "Next steps:"
echo "1. Create a DMG for distribution:"
echo "   hdiutil create -volname \"SquareDesk\" -srcfolder \"$APP_PATH\" -ov -format UDZO SquareDesk.dmg"
echo ""
echo "2. Optionally sign the DMG:"
echo "   codesign --force --sign \"Developer ID Application: Michael Pogue (K63QFQ4P65)\" SquareDesk.dmg"
echo ""
echo "Completed at $(date)"
echo "====== End of Notarization Process ======"

# Clean up temporary files, including the ZIP file that was uploaded for notarization
rm -f submit_output.txt status_output.txt $ZIP_NAME
