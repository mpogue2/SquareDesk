# Makefile for Sd/Sdtty for Linux.  Intended to be used with GCC, of course.

# This gives the compiler name and any switches that it needs to make
# it operate the way we want (ANSI language, standards conformance,
# target hardware, etc.)
CC = g++

# This gives any "-D" switches that we always need to send to the compiler.
DEFS = -m64 -static -Wall -Wno-switch -Wno-uninitialized -Wno-char-subscripts

# This gives the optimization and/or debug info.  These flags presumably
# don't affect the semantics of the language and run-time environment, so you
# might reasonably want to change them to suit your taste.
# The options shown here have been chosen to optimize the program for
# production use.  Depending on your operating system, compiler, and debugger,
# this may compromise the ability to debug the program.  In this case, you may
# need to choose different options, typically "-g", for debugging.
# Consult your system, compiler, and debugger vendor for further information.
CDEBUGFLAGS = -O4

CFLAGS =$(CDEBUGFLAGS) $(DEFS)

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the system-dependent part of the TTY user interface (sdui-ttu.cpp).
#
TTY_FLAGS =

# These are the library flags that we must use for the final bind of
# "sdtty".
#
# There was a time when I thought that libraries might actually work
# properly on Linux.  After all, the Unix community has had about
# 30 years to figure out how to do it.  Alas, it isn't so.  Libraries
# are just as broken on Linux as on HP-UX.  (OK, not *that* broken,
# but still unacceptable.)  Specifically, a compilation on Debian 3.0
# wouldn't run on Red Hat 6.2.  Something about curses version 4 vs.
# version 5.  Haven't these people had long enough to get curses
# right?  Well, they're actually a long way from getting it right.
# (Hint: press escape and note that it delays for 1 second before
# clearing the text line.  The reason has to do with the nonexistent
# possibility (honest, I'm using a modern keyboard, and I'm pretty
# sure the OS knows that!) that the terminal is a DEC VT100.)
# So they're nowhere close to getting it right.  But couldn't
# they at least get it consistent and compatible?
# And curses only handles a few function keys, because that's all the
# VT100 had.  My keyboard has F1 through F12, and can distinguish
# between normal, control, alt, and control alt.  PC hardware has had
# this for many years.  Sd and Sdtty on Windoze make use of those,
# but Linux can't be bothered.
#
# Sorry about the flaming, but I'm really tired of this.
#
# So we statically bind the curses library.
# Not any more.  It's outta here!
#
# In fact, we statically bind all libraries, because there have been
# other problems.  The Linux community, like the Unix community
# before them, just can't get their act together.
# At least Linux knows where to find the library -- we don't have
# to give the library pathname.
#
# 5 Jan 2005:  Gcc 3.2.3 under Red Hat now requires libgpm.  (Debian didn't.)
# 27 Sept 2009:  It's just too complicated to keep track of.  Two makefiles now.
# 8 Jun 2012:  Red Hat seems to do libraries correctly.  Finally!  So taking out the "static" stuff.

SDLIB_OBJS = sdmain.o sdutil.o sdbasic.o sdinit.o \
             sdtables.o sdctable.o sdtop.o sdconcpt.o sdpreds.o \
             sdgetout.o sdmoves.o sdtand.o sdconc.o sdistort.o \
             mapcachefile.o sdpick.o sdsi.o sdmatch.o common.o

HFILES = sdui.h sd.h sdbase.h database.h paths.h mapcachefile.h sort.h \
             deploy.h resource.h sdprint.h

MAKEFILES = makefile.linux32 makefile.linux64 \
            makefile.cygnus makefile.cygwin makefile.djgpp \
            makefile.mingw makefile.mac makefile.solaris

SDTTY_OBJS = sdui-tty.o sdui-ttu.o

SDTTY_LINK_OBJS = $(SDLIB_OBJS) $(SDTTY_OBJS)

MKCALLS_OBJS = mkcalls.o common.o

all: sdtty mkcalls sd_calls.dat

mkcalls: $(MKCALLS_OBJS)
	$(CC) $(CFLAGS) -o $@ $(MKCALLS_OBJS)

sdtty: $(SDLIB_OBJS) $(SDTTY_OBJS)
	$(CC) $(CFLAGS) -o $@ $(SDTTY_LINK_OBJS)

sd_calls.dat: sd_calls.txt mkcalls
	./mkcalls ./sd_calls.txt

.SUFFIXES: .c .cpp

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CC) $(CFLAGS) -c $<

sdui-ttu.o: sdui-ttu.cpp
	$(CC) $(CFLAGS) $(TTY_FLAGS) -c $<

# Miscellaneous file dependencies.

sd.h sdui.h: sdbase.h database.h

mkcalls.o sdmain.o sdsi.o: paths.h

common.o mkcalls.o: database.h

sdinit.cpp: mapcachefile.h sort.h

mapcachefile.cpp: mapcachefile.h

$(SDLIB_OBJS) $(SDTTY_OBJS): sdui.h sd.h database.h paths.h

clean::
	-$(RM) *.o sd sdtty mkcalls sd_calls.dat tags

tarball::
	tar zcvf linux.tgz sdtty mkcalls sd_calls.txt sd_calls.dat COPYING.txt

savesource::
	tar cvf sd_source $(SDLIB_OBJS:.o=.cpp) $(SDTTY_OBJS:.o=.cpp) \
               $(MKCALLS_OBJS:.o=.cpp) $(HFILES) \
               sdui-ttu.cpp $(MAKEFILES) \
               sd_calls.txt db_doc.txt COPYING.txt
