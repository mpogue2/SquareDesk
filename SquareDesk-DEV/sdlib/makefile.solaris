# Makefile for Sd/Sdtty for Solaris

# This gives the compiler name and any switches that it needs to make
# it operate the way we want (ANSI language, standards conformance,
# target hardware, etc.)
CC = g++

# This gives any "-D" switches that we always need to send to the compiler.
DEFS = -Wall -Wno-switch -Wno-uninitialized -Wno-char-subscripts

# This gives the optimization and/or debug info.  These flags presumably
# don't affect the semantics of the language and run-time environment, so you
# might reasonably want to change them to suit your taste.
# The options shown here have been chosen to optimize the program for
# production use.  Depending on your operating system, compiler, and debugger,
# this may compromise the ability to debug the program.  In this case, you may
# need to choose different options, typically "-g", for debugging.
# Consult your system, compiler, and debugger vendor for further information.
CDEBUGFLAGS = -O2

CFLAGS =$(CDEBUGFLAGS) $(DEFS)

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the X11 user interface (sdui-x11.c).
X11_FLAGS =

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the system-dependent part of the TTY user interface (sdui-ttu.cpp).
#
TTY_FLAGS =

# These are the library flags that we must use for the final bind of
# the X11 version of "sd".
X11_LIBS =

# These are the library flags that we must use for the final bind of
# "sdtty".
#
# There was a time when I thought that libraries might actually work
# properly on Linux.  After all, the Unix community has had about
# 30 years to figure out how to do it.  Alas, it isn't so.  Libraries
# are just as broken on Linux as on HP-UX.  (OK, not *that* broken,
# but still unacceptable.)  Specifically, a compilation on Debian 3.0
# wouldn't run on Red Hat 6.2.  Something about curses version 4 vs.
# version 5.  Haven't these people had long enough to get curses
# right?  Well, they're actually a long way from getting it right.
# (Hint: press escape and note that it delays for 1 second before
# clearing the text line.  The reason has to do with the nonexistent
# possibility (honest, I'm using a modern keyboard, and I'm pretty
# sure the OS knows that!) that the terminal is a DEC VT100.)
# So they're nowhere close to getting it right.  But couldn't
# they at least get it consistent and compatible?
# And curses only handles a few function keys, because that's all the
# VT100 had.  My keyboard has F1 through F12, and can distinguish
# between normal, control, alt, and control alt.  PC hardware has had
# this for many years.  Sd and Sdtty on Windoze make use of those,
# but Linux (and Solaris, and all other Unixes) can't be bothered.
#
# Sorry about the flaming, but I'm really tired of this.
#
# So we statically bind the curses library.
# Not any more.  It's outta here!
#
TTY_LIBS =

SD_SRCS = sdmain.cpp sdutil.cpp sdbasic.cpp sdinit.cpp \
          sdtables.cpp sdctable.cpp sdtop.cpp sdconcpt.cpp sdpreds.cpp \
          sdgetout.cpp sdmoves.cpp sdtand.cpp sdconc.cpp sdistort.cpp \
          sdpick.cpp sdsi.cpp mapcachefile.cpp common.cpp

SD_OBJS = sdmain.o sdutil.o sdbasic.o sdinit.o \
          sdtables.o sdctable.o sdtop.o sdconcpt.o sdpreds.o \
          sdgetout.o sdmoves.o sdtand.o sdconc.o sdistort.o \
          sdpick.o sdsi.o mapcachefile.o common.o

SDX11_SRC = sdui-x11.c
SDX11_OBJ = sdui-x11.o

SDTTY_SRCS = sdui-tty.cpp sdmatch.cpp sdui-ttu.cpp
SDTTY_OBJS = sdui-tty.o sdmatch.o sdui-ttu.o

SDTTY_LINK_OBJS = $(SD_OBJS) $(SDTTY_OBJS)

MKCALLS_SRCS = mkcalls.cpp common.cpp
MKCALLS_OBJS = mkcalls.o common.o

SRCS = $(SD_SRCS) $(SDX11_SRC) $(SDTTY_SRCS) $(MKCALLS_SRCS)
OBJS = $(SD_OBJS) $(SDX11_OBJ) $(SDTTY_OBJS) $(MKCALLS_OBJS)

all: alltty
allx11: sd sd_calls.dat
alltty: sdtty sd_calls.dat
everything: allx11 sdtty

LDPRELIBS =
LDPOSTLIBS = lib\crt0.o lib\libc.a

sd: $(SD_OBJS) $(SDX11_OBJ)
	$(CC) $(CFLAGS) -o $@ $(SD_OBJS) $(SDX11_OBJ) $(LDPRELIBS) $(X11_LIBS) $(LDPOSTLIBS)

mkcalls: $(MKCALLS_OBJS)
	$(CC) $(CFLAGS) -o $@ $(MKCALLS_OBJS)

sdtty: $(SD_OBJS) $(SDTTY_OBJS)
	$(CC) $(CFLAGS) -o $@ $(SDTTY_LINK_OBJS) $(TTY_LIBS)

sd_calls.dat: sd_calls.txt mkcalls
	./mkcalls ./sd_calls.txt

.SUFFIXES: .c .cpp

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CC) $(CFLAGS) -c $<

sdui-x11.o: sdui-x11.c
	$(CC) $(CFLAGS) $(X11_FLAGS) -c $<

sdui-ttu.o: sdui-ttu.cpp
	$(CC) $(CFLAGS) $(TTY_FLAGS) -c $<

# Miscellaneous file dependencies.

mkcalls.o sdmain.o sdsi.o sdui-x11.o: paths.h

mkcalls.o: database.h

sdinit.cpp: mapcachefile.h sort.h

mapcachefile.cpp: mapcachefile.h

$(SD_OBJS) $(SDX11_OBJ) $(SDTTY_OBJS): sd.h database.h

clean::
	-$(RM) *.o sd sdtty mkcalls sd_calls.dat tags

TAG_FILES = ${SRCS} *.h

tags: ${TAG_FILES}
	/opt/sfw/bin/ctags ${TAG_FILES}
