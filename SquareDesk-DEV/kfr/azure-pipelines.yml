jobs:
- job: Windows_MSVC_x86_64_AVX512_Clang10_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      choco install ninja
      choco install llvm

      curl -o "$(Agent.TempDirectory)/sde.zip" -L $(SDE_URL_WINDOWS)
      "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$(Agent.TempDirectory)/sde.zip"

      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      set PATH=%PATH:C:\Strawberry\c\bin;=%
      set PATH=C:\sde;%PATH%
      ci\run.cmd build-release -DENABLE_CAPI_BUILD=ON -DARCH_TESTS=ON -DENABLE_DFT_MULTIARCH=ON -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe" -DUSE_SDE=ON -DCPU_ARCH=sse2 -DCMAKE_CXX_FLAGS=-m64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR="C:/Program Files/LLVM/bin/llvm-lib.exe"

- job: Windows_MSVC_x86_AVX512_Clang10_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      choco install ninja
      choco install llvm

      curl -o "$(Agent.TempDirectory)/sde.zip" -L $(SDE_URL_WINDOWS)
      "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$(Agent.TempDirectory)/sde.zip"

      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      set PATH=%PATH:C:\Strawberry\c\bin;=%
      set PATH=C:\sde;%PATH%
      ci\run.cmd build-release -DENABLE_CAPI_BUILD=ON -DARCH_TESTS=ON -DENABLE_DFT_MULTIARCH=ON -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe" -DUSE_SDE=ON -DCPU_ARCH=sse2 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR="C:/Program Files/LLVM/bin/llvm-lib.exe"

- job: Linux_x86_64_Clang6
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get update && sudo apt-get install -y ninja-build libmpfr-dev
      curl -o "$(Agent.TempDirectory)/sde.tar.bz2" -L $(SDE_URL_LINUX)
      mkdir "$(Agent.TempDirectory)/sde-bin"
      tar -C "$(Agent.TempDirectory)/sde-bin" -xjf "$(Agent.TempDirectory)/sde.tar.bz2"  --strip 1
      sudo ln -s $(Agent.TempDirectory)/sde-bin/sde64 /usr/bin/sde
      ci/run.sh build-release -DARCH_TESTS=sse2,sse3,sse41,avx,avx2,avx512 -DCPU_ARCH=avx2 -DUSE_SDE=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release
      
- job: Linux_x86_64_Clang8
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - bash: |
      set -e
      sudo apt-get update && sudo apt-get install -y ninja-build libmpfr-dev clang-8
      curl -o "$(Agent.TempDirectory)/sde.tar.bz2" -L $(SDE_URL_LINUX)
      mkdir "$(Agent.TempDirectory)/sde-bin"
      tar -C "$(Agent.TempDirectory)/sde-bin" -xjf "$(Agent.TempDirectory)/sde.tar.bz2"  --strip 1
      sudo ln -s $(Agent.TempDirectory)/sde-bin/sde64 /usr/bin/sde
      ci/run.sh build-release -DENABLE_CAPI_BUILD=ON -DARCH_TESTS=sse2,sse3,sse41,avx,avx2,avx512 -DCPU_ARCH=avx2 -DUSE_SDE=ON -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Release

- job: Linux_x86_64_GCC7
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt-get update && sudo apt-get install -y ninja-build libmpfr-dev gcc-7 g++-7
      ci/run.sh build-release -DCPU_ARCH=avx -DENABLE_DFT=OFF -DCMAKE_CXX_COMPILER=g++-7 -DCMAKE_BUILD_TYPE=Release

- job: Linux_x86_64_GCC8
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt-get update && sudo apt-get install -y ninja-build libmpfr-dev gcc-8 g++-8
      curl -o "$(Agent.TempDirectory)/sde.tar.bz2" -L $(SDE_URL_LINUX)
      mkdir "$(Agent.TempDirectory)/sde-bin"
      tar -C "$(Agent.TempDirectory)/sde-bin" -xjf "$(Agent.TempDirectory)/sde.tar.bz2"  --strip 1
      sudo ln -s $(Agent.TempDirectory)/sde-bin/sde64 /usr/bin/sde
      ci/run.sh build-release -DARCH_TESTS=sse2,sse3,sse41,avx,avx2 -DUSE_SDE=ON -DCPU_ARCH=avx -DENABLE_DFT=OFF -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_BUILD_TYPE=Release
      
- job: Linux_x86_64_GCC9
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt-get update && sudo apt-get install -y ninja-build libmpfr-dev gcc-9 g++-9
      curl -o "$(Agent.TempDirectory)/sde.tar.bz2" -L $(SDE_URL_LINUX)
      mkdir "$(Agent.TempDirectory)/sde-bin"
      tar -C "$(Agent.TempDirectory)/sde-bin" -xjf "$(Agent.TempDirectory)/sde.tar.bz2"  --strip 1
      sudo ln -s $(Agent.TempDirectory)/sde-bin/sde64 /usr/bin/sde
      ci/run.sh build-release -DARCH_TESTS=sse2,sse3,sse41,avx,avx2 -DUSE_SDE=ON  -DCPU_ARCH=avx2 -DENABLE_DFT=OFF -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_BUILD_TYPE=Release

- job: Linux_ARM_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get update && sudo apt-get install -y ninja-build g++-arm-linux-gnueabihf qemu
      ci/run.sh build-release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/arm.cmake -DARCH_FLAGS=-DLIBC_WORKAROUND_GETS=1

- job: Linux_ARM64_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get update && sudo apt-get install -y ninja-build g++-aarch64-linux-gnu qemu
      ci/run.sh build-release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/aarch64.cmake -DARCH_FLAGS=-DLIBC_WORKAROUND_GETS=1

- job: macOS15_x86_64_Clang_Release
  timeoutInMinutes: 180
  strategy:
    matrix:
      xcode12:
        XCODE_VER: 12
      xcode11:
        XCODE_VER: 11.7
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - bash: |
      set -e
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_$(XCODE_VER).app/Contents/Developer"
      brew install ninja
      ci/run.sh build-release -DENABLE_CAPI_BUILD=ON -DARCH_TESTS=sse2,ssse3,sse41,avx -DCPU_ARCH=detect -DENABLE_DFT_MULTIARCH=ON -DCMAKE_BUILD_TYPE=Release      

- job: macOS_x86_64_Clang_Release
  timeoutInMinutes: 180
  strategy:
    matrix:
      xcode11:
        XCODE_VER: 11.3
      xcode10:
        XCODE_VER: 10.3
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: |
      set -e

      curl -o "$(Agent.TempDirectory)/sde.tar.bz2" -L $(SDE_URL_MACOS2)
      mkdir -p "$(Agent.TempDirectory)/sde-bin"
      tar -C "$(Agent.TempDirectory)/sde-bin" -xjf "$(Agent.TempDirectory)/sde.tar.bz2" --strip 1
      export PATH=$PATH:$(Agent.TempDirectory)/sde-bin
      sde64 -help || true

      # sudo spctl --master-disable
      # sudo /usr/sbin/DevToolsSecurity â€“enable
      sudo security authorizationdb write system.privilege.taskport allow

      sde64 -chip_check_exe_only -- $(Agent.TempDirectory)/sde-bin/intel64/nullapp

      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_$(XCODE_VER).app/Contents/Developer"
      brew install ninja
      ci/run.sh build-release -DENABLE_CAPI_BUILD=ON -DUSE_SDE=ON -DARCH_TESTS=sse2,ssse3,sse41,avx,avx2,avx512 -DCPU_ARCH=sse2 -DENABLE_DFT_MULTIARCH=ON -DCMAKE_BUILD_TYPE=Release      

- job: iOS_ARM_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - bash: |
      set -e
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_11.7.app/Contents/Developer"
      brew install ninja
      ci/run.sh build-release -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.cmake -DCMAKE_BUILD_TYPE=Release -DIOS_PLATFORM=OS -DIOS_ARCH=armv7 -DCMAKE_MAKE_PROGRAM=/usr/local/bin/ninja -DSKIP_TESTS=ON

- job: iOS_ARM64_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - bash: |
      set -e
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_11.7.app/Contents/Developer"
      brew install ninja
      ci/run.sh build-release -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.cmake -DCMAKE_BUILD_TYPE=Release -DIOS_PLATFORM=OS64 -DIOS_ARCH=arm64 -DCMAKE_MAKE_PROGRAM=/usr/local/bin/ninja -DSKIP_TESTS=ON

- job: Android_ARMv7_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install ninja
      echo y > "%TMP%\always_yes"
      echo y >> "%TMP%\always_yes"
      mkdir "%USERPROFILE%\.android"
      echo > "%USERPROFILE%\.android\repositories.cfg"
      call "%ANDROID_HOME%\tools\bin\sdkmanager.bat" "ndk-bundle" < %TMP%\always_yes
      ci\run.cmd build-release -DCMAKE_TOOLCHAIN_FILE="%ANDROID_HOME%\ndk-bundle\build\cmake\android.toolchain.cmake" -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=TRUE -DSKIP_TESTS=ON -DCMAKE_BUILD_TYPE=Release

- job: Android_AArch64_Clang_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install ninja
      echo y > "%TMP%\always_yes"
      echo y >> "%TMP%\always_yes"
      mkdir "%USERPROFILE%\.android"
      echo > "%USERPROFILE%\.android\repositories.cfg"
      call "%ANDROID_HOME%\tools\bin\sdkmanager.bat" "ndk-bundle" < %TMP%\always_yes
      ci\run.cmd build-release -DCMAKE_TOOLCHAIN_FILE="%ANDROID_HOME%\ndk-bundle\build\cmake\android.toolchain.cmake" -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=TRUE -DSKIP_TESTS=ON -DCMAKE_BUILD_TYPE=Release

- job: Windows_MinGW_x86_Clang10_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco uninstall mingw
      choco install msys2
      choco install ninja
      choco install llvm
      set PATH=C:\ProgramData\Chocolatey\bin;C:\Program Files\CMake\bin;C:\tools\msys64\usr\local\bin;C:\tools\msys64\usr\bin;C:\tools\msys64\mingw32\bin;C:\windows;C:\windows\system32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw32 -no-start -full-path -here -c "pacman -S --noconfirm mingw32/mingw-w64-i686-gcc"
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw32 -no-start -full-path -here -c "pacman -S --noconfirm mingw32/mingw-w64-i686-ninja"
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw32 -no-start -full-path -here -c "ci/run.sh build-release -DCMAKE_CXX_COMPILER=""C:/Program Files/LLVM/bin/clang++.exe"" -DCPU_ARCH=avx -DCMAKE_CXX_FLAGS=--target=i686-w64-windows-gnu -DCMAKE_BUILD_TYPE=Release"

- job: Windows_MinGW_x86_64_Clang10_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco uninstall mingw
      choco install msys2
      choco install ninja
      choco install llvm
      set PATH=C:\ProgramData\Chocolatey\bin;C:\Program Files\CMake\bin;C:\tools\msys64\usr\local\bin;C:\tools\msys64\usr\bin;C:\tools\msys64\mingw64\bin;C:\windows;C:\windows\system32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw64 -no-start -full-path -here -c "pacman -S --noconfirm mingw64/mingw-w64-x86_64-gcc"
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw64 -no-start -full-path -here -c "pacman -S --noconfirm mingw64/mingw-w64-x86_64-ninja"
      call C:\tools\msys64\msys2_shell.cmd -defterm -mingw64 -no-start -full-path -here -c "ci/run.sh build-release -DCMAKE_CXX_COMPILER=""C:/Program Files/LLVM/bin/clang++.exe"" -DCPU_ARCH=avx -DCMAKE_CXX_FLAGS=--target=x86_64-w64-windows-gnu -DCMAKE_BUILD_TYPE=Release"

- job: Windows_MSVC_x86_64_AVX512_MSVC2017_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco uninstall mingw
      choco install ninja

      curl -o "$(Agent.TempDirectory)/sde.zip" -L $(SDE_URL_WINDOWS)
      "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$(Agent.TempDirectory)/sde.zip"

      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      set PATH=%PATH:C:\Strawberry\c\bin;=%
      set PATH=C:\sde;%PATH%
      ci\run.cmd build-release -DARCH_TESTS=ON -DUSE_SDE=ON -DCPU_ARCH=avx512 -DENABLE_DFT=OFF -DCMAKE_BUILD_TYPE=Release

- job: Windows_MSVC_x86_AVX512_MSVC2017_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco uninstall mingw
      choco install ninja

      curl -o "$(Agent.TempDirectory)/sde.zip" -L $(SDE_URL_WINDOWS)
      "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$(Agent.TempDirectory)/sde.zip"

      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      set PATH=%PATH:C:\Strawberry\c\bin;=%
      set PATH=C:\sde;%PATH%
      ci\run.cmd build-release -DARCH_TESTS=OFF -DUSE_SDE=ON -DCPU_ARCH=avx512 -DENABLE_DFT=OFF -DCMAKE_BUILD_TYPE=Release

- job: Windows_MSVC2019_x86_64_Release
  timeoutInMinutes: 180
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      choco uninstall mingw
      choco install ninja

      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      set PATH=%PATH:C:\Strawberry\c\bin;=%
      ci\run.cmd build-release -DARCH_TESTS=OFF -DCPU_ARCH=detect -DENABLE_DFT=OFF -DCMAKE_BUILD_TYPE=Release
